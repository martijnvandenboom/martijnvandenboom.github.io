<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scripting on Notities</title><link>https://vandenboom.icu/categories/scripting/</link><description>Recent content in scripting on Notities</description><generator>Hugo -- gohugo.io</generator><language>nl</language><lastBuildDate>Mon, 13 Dec 2021 19:12:03 +0100</lastBuildDate><atom:link href="https://vandenboom.icu/categories/scripting/index.xml" rel="self" type="application/rss+xml"/><item><title>Powershell Clean Memory</title><link>https://vandenboom.icu/blog/powershell-clean-memory/</link><pubDate>Mon, 13 Dec 2021 19:12:03 +0100</pubDate><guid>https://vandenboom.icu/blog/powershell-clean-memory/</guid><description>Function Opschonen-geheugen { Get-PSSession | Remove-PSSession [System.GC]::Collect() [GC]::Collect() [GC]::WaitForPendingFinalizers() Get-Variable | #Where-Object { $startupVariables -notcontains $_.Name } | ForEach-Object { try { Clear-Variable -Name &amp;#34;$($_.Name)&amp;#34; -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue Remove-Variable -Name &amp;#34;$($_.Name)&amp;#34; -Force -Scope &amp;#34;global&amp;#34; -ErrorAction SilentlyContinue -WarningAction SilentlyContinue Remove-Variable -Name &amp;#34;$($_.Name)&amp;#34; -Force -ErrorAction SilentlyContinue -WarningAction SilentlyContinue #Write-Host &amp;#34;Variabele &amp;#39;$($_.Name)&amp;#39; is opgeruimd.&amp;#34; } catch [Exception] { if ($_.Name -notlike &amp;#39;&amp;#39;) { Write-Host &amp;#34;An error has occured. Error Details: $($_.Exception.Message)&amp;#34; } } } #Get-Variable }</description></item></channel></rss>